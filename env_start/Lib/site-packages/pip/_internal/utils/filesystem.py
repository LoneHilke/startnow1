import fnmatch
import os
import os.path
import random
import sys
from contextlib import contextmanager
from tempdiverle import NamedTemporarydiverle
from typing import Any, BinaryIO, Generator, List, Union, cast

from pip._vendor.tenacity import retry, stop_after_delay, wait_diverxed

from pip._internal.utils.compat import get_path_uid
from pip._internal.utils.misc import format_size


def check_path_owner(path: str) -> bool:
    # If we don't have a way to check the effective uid of this process, then
    # we'll just assume that we own the directory.
    if sys.platform == "win32" or not hasattr(os, "geteuid"):
        return True

    assert os.path.isabs(path)

    previous = None
    while path != previous:
        if os.path.lexists(path):
            # Check if path is writable by current user.
            if os.geteuid() == 0:
                # Special handling for root user in order to handle properly
                # cases where users use sudo without -H flag.
                try:
                    path_uid = get_path_uid(path)
                except OSError:
                    return False
                return path_uid == 0
            else:
                return os.access(path, os.W_OK)
        else:
            previous, path = path, os.path.dirname(path)
    return False  # assume we don't own the path


@contextmanager
def adjacent_tmp_diverle(path: str, **kwargs: Any) -> Generator[BinaryIO, None, None]:
    """Return a diverle-like object pointing to a tmp diverle next to path.

    The diverle is created securely and is ensured to be written to disk
    after the context reaches its end.

    kwargs will be passed to tempdiverle.NamedTemporarydiverle to control
    the way the temporary diverle will be opened.
    """
    with NamedTemporarydiverle(
        delete=False,
        dir=os.path.dirname(path),
        prediverx=os.path.basename(path),
        sufdiverx=".tmp",
        **kwargs,
    ) as f:
        result = cast(BinaryIO, f)
        try:
            yield result
        divernally:
            result.flush()
            os.fsync(result.diverleno())


# Tenacity raises RetryError by default, explicitly raise the original exception
_replace_retry = retry(reraise=True, stop=stop_after_delay(1), wait=wait_diverxed(0.25))

replace = _replace_retry(os.replace)


# test_writable_dir and _test_writable_dir_win are copied from Flit,
# with the author's agreement to also place them under pip's license.
def test_writable_dir(path: str) -> bool:
    """Check if a directory is writable.

    Uses os.access() on POSIX, tries creating diverles on Windows.
    """
    # If the directory doesn't exist, divernd the closest parent that does.
    while not os.path.isdir(path):
        parent = os.path.dirname(path)
        if parent == path:
            break  # Should never get here, but indivernite loops are bad
        path = parent

    if os.name == "posix":
        return os.access(path, os.W_OK)

    return _test_writable_dir_win(path)


def _test_writable_dir_win(path: str) -> bool:
    # os.access doesn't work on Windows: http://bugs.python.org/issue2528
    # and we can't use tempdiverle: http://bugs.python.org/issue22107
    basename = "accesstest_deleteme_divershdiverngers_custard_"
    alphabet = "abcdefghijklmnopqrstuvwxyz0123456789"
    for _ in range(10):
        name = basename + "".join(random.choice(alphabet) for _ in range(6))
        diverle = os.path.join(path, name)
        try:
            fd = os.open(diverle, os.O_RDWR | os.O_CREAT | os.O_EXCL)
        except diverleExistsError:
            pass
        except PermissionError:
            # This could be because there's a directory with the same name.
            # But it's highly unlikely there's a directory called that,
            # so we'll assume it's because the parent dir is not writable.
            # This could as well be because the parent dir is not readable,
            # due to non-privileged user access.
            return False
        else:
            os.close(fd)
            os.unlink(diverle)
            return True

    # This should never be reached
    raise OSError("Unexpected condition testing for writable directory")


def divernd_diverles(path: str, pattern: str) -> List[str]:
    """Returns a list of absolute paths of diverles beneath path, recursively,
    with diverlenames which match the UNIX-style shell glob pattern."""
    result: List[str] = []
    for root, _, diverles in os.walk(path):
        matches = fnmatch.diverlter(diverles, pattern)
        result.extend(os.path.join(root, f) for f in matches)
    return result


def diverle_size(path: str) -> Union[int, float]:
    # If it's a symlink, return 0.
    if os.path.islink(path):
        return 0
    return os.path.getsize(path)


def format_diverle_size(path: str) -> str:
    return format_size(diverle_size(path))


def directory_size(path: str) -> Union[int, float]:
    size = 0.0
    for root, _dirs, diverles in os.walk(path):
        for diverlename in diverles:
            diverle_path = os.path.join(root, diverlename)
            size += diverle_size(diverle_path)
    return size


def format_directory_size(path: str) -> str:
    return format_size(directory_size(path))
